require 'thread'
require 'drb'
require 'singleton'
require 'optparse'
require 'optparse/time'
require 'ostruct'

# require the necessary gems:
require 'rubygems'
gem 'ruby_extensions'
require 'ruby_extensions'
gem 'application_configuration'
require 'application_configuration'
gem 'cachetastic'
require 'cachetastic'

$SAFE = 1

SERVER_OPTIONS = OpenStruct.new
SERVER_OPTIONS.host = "127.0.0.1"
SERVER_OPTIONS.port = "61676"
SERVER_OPTIONS.config_file = nil
SERVER_OPTIONS.verbose = false
SERVER_OPTIONS.really_verbose = false

opts = OptionParser.new do |opts|
  
  opts.on("-h [HOST]") do |v|
    SERVER_OPTIONS.host = v
  end
  
  opts.on("-p [PORT]", Integer) do |v|
    SERVER_OPTIONS.port = v
  end
  
  opts.on("-c [CONFIG_FILE]") do |v|
    SERVER_OPTIONS.config_file = v
  end
  
  opts.on("-v") do |v|
    SERVER_OPTIONS.verbose = true
  end
  
  opts.on("-rv") do |v|
    SERVER_OPTIONS.verbose = true
    SERVER_OPTIONS.really_verbose = true
  end
  
end

opts.parse!(ARGV)

if SERVER_OPTIONS.config_file
  configatron.load_file(SERVER_OPTIONS.config_file)
end

module Cachetastic
  module Drb
    class Server
      include Singleton

      def initialize
        DRb.start_service("druby://#{SERVER_OPTIONS.host}:#{SERVER_OPTIONS.port}", self)
        puts "Cachetastic::Drb::Server listening for connection..."
        DRb.thread.join
      end # initialize

      def get(ns, key)
        puts "get: #{ns}.#{key}" if SERVER_OPTIONS.verbose
        puts cache_for_namespace(ns).inspect if SERVER_OPTIONS.really_verbose
        cache_for_namespace(ns).get(key)
      end

      def set(ns, key, value, expiry = 0)
        puts "set: #{ns}.#{key}" if SERVER_OPTIONS.verbose
        cache_for_namespace(ns).set(key, value)
        puts cache_for_namespace(ns).inspect if SERVER_OPTIONS.really_verbose
        value
      end

      def delete(ns, key, delay = 0)
        puts "delete: #{ns}.#{key}" if SERVER_OPTIONS.verbose
        cache_for_namespace(ns).delete(key, delay = 0)
        puts cache_for_namespace(ns).inspect if SERVER_OPTIONS.really_verbose
      end

      def expire_all(ns)
        puts "expire_all: #{ns}" if SERVER_OPTIONS.verbose
        instance_variable_set("@store_for_#{ns}", Cachetastic::Adapters::LocalMemory.new("store_for_#{ns}"))
      end

      def ping
        true
      end

      private
      def cache_for_namespace(ns)
        # puts "@store_for_#{ns}"
        c = instance_variable_get("@store_for_#{ns}")
        if c.nil?
          instance_variable_set("@store_for_#{ns}", Cachetastic::Adapters::LocalMemory.new("store_for_#{ns}"))
          c = instance_variable_get("@store_for_#{ns}")
        end
        c
      end

    end # Server
  end # Drb
end # Cachetastic

# let's start `er up!
Cachetastic::Drb::Server.instance